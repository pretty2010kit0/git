Git学习笔记
------------------------------------
远程仓库
在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，
所以，需要一点设置：

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和
id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），
创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，
所以也无需设置密码。

如果一切顺利的话，可以在用户主目录(C:\Users\Administrator)里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容.

为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，
而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把
每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。
所以，不要把敏感信息放进去。

如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，
这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己
的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。


现在，我们根据GitHub的提示，在本地的git仓库下运行命令：
确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。
 
git remote add origin https://github.com/pretty2010kit0/test.git
git push -u origin master

git remote rm origin 
git remote 

把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样.

从现在起，只要本地作了提交，就可以通过命令：

$ git push origin master

把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！
-----------------------------------
小结

要关联一个远程库，使用命令
git remote add origin https://github.com/pretty2010kit0/test.git

关联后，使用命令
git push -u origin master
第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令
git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
------------------------------------
how to fix “WARNING: terminal is not fully functional” error in command console? 
Create a new System variable "TERM", value "msys"
------------------------------------
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ mkdir learngit
$ cd learngit
$ pwd

$ git init
---------------------------------------------------------
第一步，用命令git add告诉Git，把文件添加到仓库：

$ git add readme.txt
$ git add file1.txt
$ git add file2.txt file3.txt
$ git rm file1 file2 ...

第二步，用命令git commit告诉Git，把文件提交到仓库：

$ git commit -m "wrote a readme file"
----------------------------------------------
$ git status
$ git diff readme.txt 
---------------------------------------------
$ git log
$ git log --pretty=oneline
-- 上一个版本就是HEAD^
-- 上上一个版本就是HEAD^^
-- 当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
-- 使用 commit id
$ git reset --hard HEAD^ 
$ git reset --hard HEAD^^
$ git reset --hard HEAD~100
$ git reset --hard 165c2

git reflog

--------------------------------------------------
小结

现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
---------------------------------------------------
// 命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

// 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

// 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

// 总之，就是让这个文件回到最近一次git commit或git add时的状态。

git checkout -- file //可以丢弃工作区的修改
git checkout -- file //其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

// git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
-------------------------------------------------
git reset HEAD file //可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset HEAD readme.txt //当我们用HEAD时，表示最新的版本
-------------------------------------------------
小结

又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD file，就回到了场景1，
第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
--------------------------------------------------








