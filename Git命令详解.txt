三、 Git 命令详解
现在我们有了本地和远程的版本库，让我们来试着用用Git的基本命令：
git pull：从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，
例如：'git pull origin master'就是将origin这个版本库的代码更新到本地的
master主枝，该功能类似于SVN的update
git add：是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就
表示记入了版本历史中，这也是提交之前所需要执行的一步，
例如'git add app/model/user.rb'就会增加app/model/user.rb文件到Git的索
引中，该功能类似于SVN的add
git rm：从当前的工作空间中和索引中删除文件，
例如'git rm app/model/user.rb'，该功能类似于SVN的rm、del
git commit：提交当前工作空间的修改内容，类似于SVN的commit命令，
例如'git commit -m story #3, add user model'，提交的时候必须用-m来输入
一条提交信息，该功能类似于SVN的commit
git push：将本地commit的代码更新到远程版本库中，
例如'git push origin'就会将本地的代码更新到名为orgin的远程版本库中
git log：查看历史日志，该功能类似于SVN的log
git revert：还原一个版本的修改，必须提供一个具体的Git版本号，
例如'git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20'，Git的版本号
都是生成的一个哈希值

上面的命令几乎都是每个版本控制工具所公有的，下面就开始尝试一下Git独有的一些命令：
git branch：对分支的增、删、查等操作，例如'git branch new_branch'会从当前
的工作版本创建一个叫做new_branch的新分支，'git branch -D new_branch'就会
强制删除叫做new_branch的分支，'git branch'就会列出本地所有的分支
git checkout：Git的checkout有两个作用，其一是在不同的branch之间进行切换，
例如'git checkout new_branch'就会切换到new_branch的分支上去；另一个功能是
还原代码的作用，例如'git checkout app/model/user.rb'就会将user.rb文件从上
一个已提交的版本中更新回来，未提交的内容全部会回滚
git rebase：用下面两幅图解释会比较清楚一些，rebase命令执行后，实际上是将分支
点从C移到了G，这样分支也就具有了从C到G的功能




git reset：将当前的工作目录完全回滚到指定的版本号，假设如下图，我们有A-G五次
提交的版本，其中C的版本号是 bbaf6fb5060b4875b18ff9ff637ce118256d6f20，我们
执行了'git reset bbaf6fb5060b4875b18ff9ff637ce118256d6f20'那么结果就只剩
下了A-C三个提交的版本



git stash：将当前未提交的工作存入Git工作栈中，时机成熟的时候再应用回来，这里
暂时提一下这个命令的用法，后面在技巧篇会重点讲解
git config：利用这个命令可以新增、更改Git的各种设置，
例如'git config branch.master.remote origin'就将master的远程版本库设置为
别名叫做origin版本库，后面在技巧篇会利用这个命令个性化设置你的Git，为你打造独
一无二的 Git
git tag：可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，
例如你可以使用'git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20'
来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，
而不是哈希值了